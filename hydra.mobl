application hydra

import mobl
import mobl::ui::ios
import mobl::ui::googlechart

resource img/failure-some.gif
resource img/failure.gif
resource img/success.gif
resource img/question-mark.png
resource img/nixos_25.png
resource img/settings_25.png
resource img/checkmark_32.png
resource img/error_32.png
resource img/windows_32.png
resource img/mac_32.png
resource img/linux_32.png
resource img/freebsd_32.png


control float(side : String = "right", left : Num = 0, right : Num = 0) {
  <span class="float" style="float: " + side + "; margin-left: " + left + "px; margin-right: " +right+"px;">
    elements()
  </span>
}

screen root() {
  tabSet([("Hydra","img/nixos_25.png", main), ("Settings", "img/settings_25.png", settings)])
}

control settings() {
  header("Settings")
}

control main() {
    var projects = Collection<Project>()
    var stats : [Num] = []
    var url : String = "mobl/ui/ios/empty.png"
    var url2 : String = "mobl/ui/ios/empty.png"
   
    script {
        async {
            stats = Hydra.nrbuilds(24, "hour");
            url = googleChartUrl(
                type = "bvg", 
                data = [stats] , 
                title = "Nr builds over the last 24 hours", 
                seriesColors= [["BBCEBB"]],
                visibleAxes=["y"]
            );
            stats = Hydra.nrbuilds(30, "day");
            url2 = googleChartUrl(
                type = "bvg", 
                data = [stats] , 
                title = "Nr builds over the last 30 days", 
                seriesColors= [["BBCEBB"]],
                visibleAxes=["y"]
            );
            projects = Hydra.projects();
        }
    }
    header("hydra.nixos.org")
    group {
      itemArrow(onclick={ latestbuildsall(); }) { "Latest builds" }
      itemArrow(onclick={ queue(); }) { "Queue (" label(Hydra.nrrunning()) "/" label(Hydra.nrqueue()) ")" }
    }
    singleItem() {
        image(url, onclick={})
    }
    singleItem() {
        image(url2, onclick={})
    }    
    group {
        list(p in projects) {
            itemArrow(onclick={ project(p); }) { label(p.name) }
        }   
    }
}

function buildstats(nrs : [Num]) : [(String, Num)] {
    log(""+nrs);
    var arr : [(String, Num)] = [];
    foreach(nr in nrs) {
        arr.push(("",nr));
    }
    return arr;
}

control link(url : String) {
  <a href=url>elements()</a>
}

control linkExt(url : String) {
  <a href=url target="_new">elements()</a>
}

screen project(p : Project) {
    var jobsets = Collection<Jobset>()
    var url : String = "mobl/ui/ios/empty.png"

    var stats : [Num] = []
    var data  : [(String, Num)] = []
    script {
      async {
        jobsets = Hydra.jobsets(p.name);
        stats = Hydra.nrbuilds(30, "day", p.name);
        url = googleChartUrl(
            type = "bvg", 
            data = [stats] , 
            size = (300, 100), 
            title = "Nr builds over the last 30 days", 
            barWidth= ("a", 10, 20), 
            seriesColors= [["BBCEBB"]],
            fills=[("bg", "s", "65432100")], 
            visibleAxes=["y"]
        );
      }
    }

    header(p.name) {
        backButton("Back", onclick={ screen return; })
    }
    singleItem() {
        image(url, onclick={})
    }
    group {
        list(j in jobsets) {
            itemArrow(onclick={ jobset(j); }) {
                float(side="left", left=0, right=10 ) {
                    image(jobsetStatusImage(j), onclick={})
                }

                 label(j.name)
                <span style=jobsetColor(j)>
                float(side="right", right=30) {
                    cond(j.nrscheduled !=0) { label(j.nrscheduled) " builds in queue, " }
                    label(j.nrsucceeded) "/" label(j.nrtotal) " = " label(successRate(j)) "%"
                }
                </span>
            }
        }
    }
}

screen jobset(j : Jobset) {
    var url1 : String = "mobl/ui/ios/empty.png"
    var url2 : String = "mobl/ui/ios/empty.png"
    script {
        async {
        	
            url1 = googleChartUrl(
                type = "p3", 
                data = [ [(j.nrfailed/j.nrtotal)*100, (j.nrsucceeded/j.nrtotal)*100, (j.nrscheduled/j.nrtotal)*100] ], 
                size = (300, 100), 
                seriesColors= [["BBCEBB"]],
                fills=[("bg", "s", "65432100")],
                extraAttrs = [ ("chl","Failed|Succeeded|Scheduled")] 
            );
            var stats = Hydra.nrbuilds(30, "day", j.project, j.name) ;
            url2 = googleChartUrl(
                type = "bvg", 
                data = [stats] , 
                title = "Nr builds over the last 30 days", 
                size = (300, 100), 
                barWidth= ("a", 10, 20), 
                seriesColors= [["BBCEBB"]],
                fills=[("bg", "s", "65432100")], 
                visibleAxes=["y"] 
            );
        }
    }

    header(j.project + ":" + j.name) {
        backButton("Back", onclick={ screen return; })
    }
    singleItem { 
        image(url1, onclick={}) 
    }
    singleItem() {
        image(url2, onclick={})
    }
    var builds = Hydra.latestbuilds(5, j.project, j.name)
    buildlist(builds)
}

control singleItem() {
    <ul><li>elements()</li></ul>
}

function jobsetStatusImage(j : Jobset) : String {
    if(j.nrscheduled > 0) { return "img/question-mark.png"; }
    if(j.nrfailed == 0) { return "img/success.gif"; }
    if(j.nrfailed > 0 && j.nrsucceeded > 0) { return "img/failure-some.gif"; }
    return "img/failure.gif";
}

function successRate(j: Jobset) : Num {
    return Math.round((j.nrsucceeded/j.nrtotal)*100) ;
}

function jobsetColor(j : Jobset) : String {
    var successrate : Num = (j.nrsucceeded/j.nrtotal)*100 ;

    if ( j.nrscheduled > 0 ){ return ""; }
    if ( successrate < 25 ){ return "color : red;"; }
    if ( successrate < 75 ){ return "color : orange;"; }
    if ( successrate <= 100 ){ return "color : green;"; }
}

control builditem(b : Build) {
  itemArrow(onclick={ openUrlWindow("http://hydra.nixos.org/build/"+b.id, "build"); }) {
     float(side="left", left=0, right=10 ) {
        systemImg(b.system)
        cond(b.finished == 1) {
          " "
          cond(b.buildstatus == 0) { image("img/checkmark_32.png", onclick={}) }
          cond(b.buildstatus != 0) { image("img/error_32.png", onclick={}) }
      }
     }
     label(b.nixname) ", " <span style="font-style:italic;font-size:smaller;"> label(formatDate(epoch2Date(b.timestamp))) </span>
       cond(b.finished != 1) {
           <span style="font-style:italic;font-size:smaller;">
             float(side="right", right=30) {
                   cond(b.busy == 1) {"(busy)"}
                   cond(b.busy != 1) {label(b.priority)}
             }
           </span>
       }
     <br/>
     <span style="font-style:italic;font-size:smaller;">
         label(b.project) ":" label(b.jobset) ":" label(b.job)
         cond(b.finished == 1) {
              " - " statusMessage(b.buildstatus)
         }
       </span>
  }
}

control buildlist(builds : Collection<Build>) {
    group {
        list(b in builds) { builditem(b) }
    }
}

screen latestbuildsall() {
  var builds = Hydra.latestbuilds(20)

    header("Latest builds") {
        backButton("Back", onclick={ screen return; })
    }
    group {
        list(b in builds) { builditem(b) }
    }
}

screen queue() {
    var builds = Hydra.queue()
    header("Queue") {
        backButton("Back", onclick={ screen return; })
    }
    group {
        list(b in builds) { builditem(b) }
    }
}

control systemImg(system : String) {
  cond(system == "i686-freebsd") { image("img/freebsd_32.png", onclick={}) }
  cond(system == "i686-cygwin") { image("img/windows_32.png", onclick={}) }
  cond(system == "i686-linux" || system == "x86_64-linux") { image("img/linux_32.png", onclick={}) }
  cond(system == "i686-darwin" || system == "x86_64-darwin") { image("img/mac_32.png", onclick={}) }
}

control statusMessage(status : Num) {
  cond(status == 0 ) { "Success" }
  cond(status == 1 ) { "Failed with non-zero exit code" }
  cond(status == 2 ) { "Dependency failed" }
  cond(status == 4 ) { "Cancelled" }
  cond(status == 3 || status == 5 ) { "Unknown failure" }
}

external type Project {
  name : String
  description : String
}

external type Build {
    id : Num
    project : String
    jobset : String
    job : String
    system : String
    nixname : String
    buildstatus : Num
    busy : Num
    finished : Num
    priority : Num
    timestamp : Num
}

external type Jobset {
  project : String
  name : String
  nrscheduled : Num
  nrsucceeded : Num
  nrtotal : Num
  nrfailed : Num
}

external type RunningBuilds {

}

service Hydra {
  root = "http://hydra.nixos.org/api"
  resource projects() : Collection<Project> {
    uri = "/projects"
    method = "GET"
    encoding = "json"
  }
  resource latestbuilds(nr : Num, project: String = "", jobset : String = "", job : String = "", system : String = "") : Collection<Build> {
    uri = "/latestbuilds"
    method = "GET"
    encoding = "json"
  }
  resource jobsets(project : String) : Collection<Jobset> {
    uri = "/jobsets"
    method = "GET"
    encoding = "json"
  }
  resource queue(nr : String = 100) : Collection<Build> {
    uri = "/queue"
    method = "GET"
    encoding = "json"
  }
  resource nrqueue() : Num {
    uri = "/nrqueue"
    method = "GET"
    encoding = "json"
  }
  resource nrrunning() : Num {
    uri = "/nrrunning"
    method = "GET"
    encoding = "json"
  }
  resource nrbuilds(nr : Num, period : String, project: String = "", jobset : String = "", job : String = "", system : String = "") : [ Num ] {
    uri = "/nrbuilds"
    method = "GET"
    encoding = "json"
  }
}

external sync function openUrlWindow(url : String, window : String) : void
<javascript>
    hydra.openUrlWindow = function(s,w) { window.open(s, w); };
</javascript>

external sync function epoch2Date(epoch : Num) : DateTime
<javascript>
    hydra.epoch2Date = function(e) { return new Date(e*1000); };
</javascript>


entity ImageCache {
	cacheid  : String 
	url : String
    dataURL : String	
    datetime : DateTime
}

function lookupImage(cacheid : String) : ImageCache {
	return ImageCache.findBy("cacheid", cacheid) ;
}

function saveImage(cacheid : String, url : String, dataURL : String) {
	var data = lookupImage(cacheid) ;
    if(data == null) {
    	data = ImageCache( cacheid = cacheid );
        add(data);
    }
    data.url = url;
    data.datetime = now(); 
    data.dataURL = dataURL;
}

external function loadImage(cacheid : String, url : String) : Image

<javascript>

hydra.loadImage = function(cacheid, url) { 
    var img = new Image(); 
    img.onload = function() { 
	    var canvas = document.createElement("canvas");
	    canvas.width = img.width; 
	    canvas.height = img.height; 
	    var ctx = canvas.getContext("2d"); 
	    ctx.drawImage(img,0,0); 
	    this.saveImage(cacheid, img.src, canvas.toDataURL());
     }; 
    img.src = url; 
    return img;
} ;

</javascript>
