application hydra

import mobl
import mobl::ui::ios

resource img/failure-some.gif
resource img/failure.gif
resource img/success.gif
resource img/question-mark.png
resource img/nixos_25.png
resource img/settings_25.png
resource img/checkmark_32.png
resource img/error_32.png
resource img/windows_32.png
resource img/mac_32.png
resource img/linux_32.png
resource img/freebsd_32.png

control float(side : String = "right", left : Num = 0, right : Num = 0) {
  <span class="float" style="float: " + side + "; margin-left: " + left + "px; margin-right: " +right+"px;">
    elements()
  </span>
}

screen root() {
  tabSet([("Hydra","img/nixos_25.png", main), ("Settings", "img/settings_25.png", settings)])
}

control settings() {
  header("Settings")
}

control main() {
    var projects = Collection<Project>()
    var stats = Array<Num>()
    var url : String = "mobl/ui/ios/empty.png"

    script {
        async {
            stats = nrbuilds(24, "hour");
            var data = buildstats(stats);
            url = googleChartUrl(300, 100, "bvg", data, max(data), "Nr builds over the last 24 hours") ;
            projects = Hydra.projects();
        }
    }


    header("hydra.nixos.org")
    group {
      itemArrow(onclick={ latestbuildsall(); }) { "Latest builds" }
      itemArrow(onclick={ queue(); }) { "Queue (" label(Hydra.nrrunning()) "/" label(Hydra.nrqueue()) ")" }
    }
    singleItem() {
        image(url, onclick={})
    }
    group {
        list(p in projects) {
            itemArrow(onclick={ project(p); }) { label(p.name) }
        }

    }
}

function max(data : Array<Tuple2<String, Num>>) : Num {
    var max : Num = 0 ;
    for((label, value) in data) {
        if(value > max) { max = value; }
    }
    return max;
}

function buildstats(nrs : Array<Num>) : Array<Tuple2<String, Num>> {
    log(""+nrs);
    var arr : Array<Tuple2<String, Num>> = [];
    for(nr in nrs) {
        arr.push(("",nr));
    }
    return arr;
}

control link(url : String) {
  <a href=url>elements()</a>
}

control linkExt(url : String) {
  <a href=url target="_new">elements()</a>
}

screen project(p : Project) {
    var jobsets = Collection<Jobset>()
    var stats = Array<Num>()
    var url : String = "mobl/ui/ios/empty.png"

    var stats = Array<Num>()
    var data = Array<Tuple2<String, Num>>()
    script {
      async {
        jobsets = Hydra.jobsets(p.name);
        stats = nrbuilds(30, "day", p.name);
        data = buildstats(stats);
      }
    }

    header(p.name) {
        backButton("Back", onclick={ screen return; })
    }
    singleItem() {
        image(googleChartUrl(300, 100, "bvg", data, max(data), "Nr builds over the last 30 days"), onclick={})
    }
    group {
        list(j in jobsets) {
            itemArrow(onclick={ jobset(j); }) {
                float(side="left", left=0, right=10 ) {
                    image(jobsetStatusImage(j), onclick={})
                }

                 label(j.name)
                <span style=jobsetColor(j)>
                float(side="right", right=30) {
                    cond(j.nrscheduled !=0) { label(j.nrscheduled) " builds in queue, " }
                    label(j.nrsucceeded) "/" label(j.nrtotal) " = " label(successRate(j)) "%"
                }
                </span>
            }
        }
    }
}

screen jobset(j : Jobset) {
    var stats = nrbuilds(30, "day", j.project, j.name)
    var data = buildstats(stats)
    header(j.name) {
        backButton("Back", onclick={ screen return; })
    }
    singleItem { image(googleChartUrl(300, 100, "p3", [("Failed", (j.nrfailed/j.nrtotal)*100), ("Succeeded", (j.nrsucceeded/j.nrtotal)*100), ("Scheduled", (j.nrscheduled/j.nrtotal)*100)],title=""), onclick={}) }
    singleItem() {
        image(googleChartUrl(300, 100, "bvg", data, max(data), "Nr builds over the last 30 days"), onclick={})
    }
    var builds = latestbuilds(5, j.project, j.name)
    buildlist(builds)
}

control singleItem() {
    <ul><li>elements()</li></ul>
}

function googleChartUrl(width : Num, height : Num, type : String, data : Array<Tuple2<String, Num>>, max : Num = 100, title : String) : String {
  var values = "";
  var labels = "";
    for((label, value) in data) {
        values = values + value + ",";
        if(label != "") {
            labels = labels + label + "|";
        }
    }
    return "http://chart.apis.google.com/chart?cht="+ type +"&chtt="+title+"&chco=bbcebb&chbh=a,10,20&chxt=y&chds=0,"+max+"&chxr=0,0,"+max+"&chf=bg,s,65432100&chs="+width+"x"+height+"&chd=t:"+values + "0"+ (label == "" ? "" : "&chl="+labels);
}

function jobsetStatusImage(j : Jobset) : String {
    if(j.nrscheduled > 0) { return "img/question-mark.png"; }
    if(j.nrfailed == 0) { return "img/success.gif"; }
    if(j.nrfailed > 0 && j.nrsucceeded > 0) { return "img/failure-some.gif"; }
    return "img/failure.gif";
}

function successRate(j: Jobset) : Num {
    return Math.round((j.nrsucceeded/j.nrtotal)*100) ;
}

function jobsetColor(j : Jobset) : String {
    var successrate : Num = (j.nrsucceeded/j.nrtotal)*100 ;

    if ( j.nrscheduled > 0 ){ return ""; }
    if ( successrate < 25 ){ return "color : red;"; }
    if ( successrate < 75 ){ return "color : orange;"; }
    if ( successrate <= 100 ){ return "color : green;"; }
}

control builditem(b : Build) {
  itemArrow(onclick={ openUrlWindow("http://hydra.nixos.org/build/"+b.id, "build"); }) {
     float(side="left", left=0, right=10 ) {
        systemImg(b.system)
        cond(b.finished == 1) {
          " "
          cond(b.buildstatus == 0) { image("img/checkmark_32.png", onclick={}) }
          cond(b.buildstatus != 0) { image("img/error_32.png", onclick={}) }
      }
     }
     label(b.nixname) ", " <span style="font-style:italic;font-size:smaller;"> label(formatDate(epoch2Date(b.timestamp))) </span>
       cond(b.finished != 1) {
           <span style="font-style:italic;font-size:smaller;">
             float(side="right", right=30) {
                   cond(b.busy == 1) {"(busy)"}
                   cond(b.busy != 1) {label(b.priority)}
             }
           </span>
       }
     <br/>
     <span style="font-style:italic;font-size:smaller;">
         label(b.project) ":" label(b.jobset) ":" label(b.job)
         cond(b.finished == 1) {
              " - " statusMessage(b.buildstatus)
         }
       </span>
  }
}

control buildlist(builds : Collection<Build>) {
    group {
        list(b in builds) { builditem(b) }
    }
}

screen latestbuildsall() {
  var builds = latestbuilds(20)

    header("Latest builds") {
        backButton("Back", onclick={ screen return; })
    }
    group {
        list(b in builds) { builditem(b) }
    }
}

screen queue() {
    var builds = Hydra.queue()
    header("Queue") {
        backButton("Back", onclick={ screen return; })
    }
    group {
        list(b in builds) { builditem(b) }
    }
}

control systemImg(system : String) {
  cond(system == "i686-freebsd") { image("img/freebsd_32.png", onclick={}) }
  cond(system == "i686-cygwin") { image("img/windows_32.png", onclick={}) }
  cond(system == "i686-linux" || system == "x86_64-linux") { image("img/linux_32.png", onclick={}) }
  cond(system == "i686-darwin" || system == "x86_64-darwin") { image("img/mac_32.png", onclick={}) }
}

control statusMessage(status : Num) {
  cond(status == 0 ) { "Success" }
  cond(status == 1 ) { "Failed with non-zero exit code" }
  cond(status == 2 ) { "Dependency failed" }
  cond(status == 4 ) { "Cancelled" }
  cond(status == 3 || status == 5 ) { "Unknown failure" }
}

external type Project {
  name : String
  description : String
}

external type Build {
    id : Num
    project : String
    jobset : String
    job : String
    system : String
    nixname : String
    buildstatus : Num
    busy : Num
    finished : Num
    priority : Num
    timestamp : Num
}

external type Jobset {
  project : String
  name : String
  nrscheduled : Num
  nrsucceeded : Num
  nrtotal : Num
  nrfailed : Num
}

function latestbuilds(nr : Num, project: String = "", jobset : String = "", job : String = "", system : String = "") : Collection<Build> {
    return Hydra._latestbuilds(nr, project, jobset, job, system) ;
}

function nrbuilds(nr : Num, period : String, project: String = "", jobset : String = "", job : String = "", system : String = "") : Array<Num> {
    return Hydra._nrbuilds(nr, period, project, jobset, job, system) ;
}

service Hydra {
  root = "http://130.161.159.80:3000/api"
  resource projects() : Collection<Project> {
    uri = "/projects"
    method = "GET"
    encoding = "json"
  }
  resource _latestbuilds(nr : Num, project: String, jobset : String, job : String, system : String) : Collection<Build> {
    uri = "/latestbuilds"
    method = "GET"
    encoding = "json"
  }
  resource jobsets(project : String) : Collection<Jobset> {
    uri = "/jobsets"
    method = "GET"
    encoding = "json"
  }
  resource queue(nr : String = 100) : Collection<Build> {
    uri = "/queue"
    method = "GET"
    encoding = "json"
  }
  resource nrqueue() : Num {
    uri = "/nrqueue"
    method = "GET"
    encoding = "json"
  }
  resource nrrunning() : Num {
    uri = "/nrrunning"
    method = "GET"
    encoding = "json"
  }
  resource _nrbuilds(nr : Num, period : String, project: String, jobset : String, job : String, system : String) : Array<Num> {
    uri = "/nrbuilds"
    method = "GET"
    encoding = "json"
  }
}

external sync function openUrlWindow(url : String, window : String) : void
<javascript>
    hydra.openUrlWindow = function(s,w) { window.open(s, w); };
</javascript>

external sync function epoch2Date(epoch : Num) : DateTime
<javascript>
    hydra.epoch2Date = function(e) { return new Date(e*1000); };
</javascript>

